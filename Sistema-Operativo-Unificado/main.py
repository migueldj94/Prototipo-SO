
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SISTEMA OPERATIVO UNIFICADO - PROTOTIPO EDUCATIVO
==================================================

Este es un prototipo educativo de un sistema operativo que integra m√∫ltiples 
funcionalidades b√°sicas de administraci√≥n del sistema en una sola aplicaci√≥n.

FUNCIONALIDADES PRINCIPALES:
---------------------------
üîß GESTI√ìN DE PROCESOS:
   - Listar todos los procesos del sistema con informaci√≥n detallada
   - Obtener informaci√≥n espec√≠fica de un proceso por PID
   - Iniciar nuevos procesos y aplicaciones
   - Finalizar procesos existentes de forma segura

üìÅ SISTEMA DE ARCHIVOS SIMULADO:
   - Crear y eliminar archivos y directorios virtuales
   - Navegar por la estructura de directorios simulada
   - Visualizar contenido de archivos
   - Comandos de terminal avanzados (tree, pwd, find)

üìä MONITOREO DEL SISTEMA:
   - Estad√≠sticas en tiempo real de CPU y memoria
   - B√∫squeda de procesos por nombre
   - Informaci√≥n detallada del sistema

‚öôÔ∏è UTILIDADES:
   - Informaci√≥n completa del sistema operativo unificado
   - Limpieza de pantalla
   - Gesti√≥n de sesi√≥n con tiempo de ejecuci√≥n

ARQUITECTURA:
------------
El sistema est√° dividido en m√≥dulos especializados ubicados en la carpeta 'src/':
- listar.py: Gesti√≥n y listado de procesos
- info.py: Informaci√≥n detallada de procesos
- finalizar.py: Terminaci√≥n segura de procesos
- iniciar.py: Inicio de nuevos procesos
- filesystem.py: Sistema de archivos simulado completo

DEPENDENCIAS:
------------
- psutil: Para gesti√≥n avanzada de procesos del sistema
- json: Para persistencia de datos del sistema de archivos
- datetime: Para manejo de fechas y tiempos
- subprocess: Para ejecuci√≥n de procesos externos

"""

# ============================================================================
# IMPORTACIONES DE LIBRER√çAS EST√ÅNDAR
# ============================================================================
import os          # Operaciones del sistema operativo (limpiar pantalla, etc.)
import sys         # Informaci√≥n del sistema Python y plataforma
import datetime    # Manejo de fechas y tiempos para sesi√≥n y logs
from pathlib import Path  # Manejo moderno de rutas de archivos

# ============================================================================
# IMPORTACIONES DE M√ìDULOS PROPIOS
# ============================================================================
# M√≥dulo de gesti√≥n de procesos - funciones para listar y administrar procesos
from src.listar import ejecutar_gestor, mostrar_procesos, buscar_proceso, mostrar_estadisticas

# M√≥dulo de informaci√≥n de procesos - obtener detalles espec√≠ficos de un proceso
from src.info import info_proceso

# M√≥dulo de finalizaci√≥n de procesos - terminar procesos de forma segura
from src.finalizar import ejecutar_finalizar, matar_proceso

# M√≥dulo de inicio de procesos - crear y ejecutar nuevos procesos
from src.iniciar import ejecutar_iniciar, iniciar_proceso

# M√≥dulo del sistema de archivos simulado - funcionalidad completa de archivos virtuales
from src.filesystem import ejecutar_filesystem

# ============================================================================
# CLASE PRINCIPAL DEL SISTEMA OPERATIVO UNIFICADO
# ============================================================================

class SistemaOperativoUnificado:
    """
    Clase principal que maneja todo el sistema operativo unificado.
    
    Esta clase act√∫a como el n√∫cleo del sistema, coordinando todas las 
    funcionalidades y m√≥dulos disponibles. Gestiona la interfaz de usuario,
    el flujo de navegaci√≥n entre m√≥dulos y mantiene el estado de la sesi√≥n.
    
    Atributos:
        version (str): Versi√≥n actual del sistema
        nombre (str): Nombre completo del sistema
        fecha_inicio (datetime): Momento en que se inici√≥ la sesi√≥n actual
    
    M√©todos principales:
        - mostrar_banner(): Muestra el banner de bienvenida
        - mostrar_menu_principal(): Presenta el men√∫ de opciones
        - ejecutar_opcion(): Procesa la selecci√≥n del usuario
        - ejecutar(): Bucle principal del sistema
    """
    
    def __init__(self):
        """
        Inicializar el sistema operativo unificado.
        
        Establece los valores b√°sicos del sistema como versi√≥n, nombre
        y registra el momento de inicio de la sesi√≥n para estad√≠sticas.
        """
        self.version = "1.0"                                    # Versi√≥n del sistema
        self.nombre = "Sistema Operativo Unificado"             # Nombre del sistema
        self.fecha_inicio = datetime.datetime.now()             # Timestamp de inicio de sesi√≥n
    
    def mostrar_banner(self):
        """
        Mostrar el banner principal del sistema con informaci√≥n b√°sica.
        
        Limpia la pantalla y muestra un banner decorativo con:
        - Nombre del sistema
        - Versi√≥n y tipo (prototipo educativo)
        - Fecha y hora de inicio de sesi√≥n
        
        El banner utiliza caracteres Unicode para crear un dise√±o atractivo.
        """
        # Limpiar pantalla seg√∫n el sistema operativo
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # Crear banner decorativo con informaci√≥n del sistema
        print("‚ïî" + "="*70 + "‚ïó")
        print("‚ïë" + f"{self.nombre:^70}" + "‚ïë")
        print("‚ïë" + f"Versi√≥n {self.version} - Prototipo Educativo{'':<32}" + "‚ïë")
        print("‚ïë" + f"Iniciado: {self.fecha_inicio.strftime('%d/%m/%Y %H:%M:%S')}{'':<32}" + "‚ïë")
        print("‚ïö" + "="*70 + "‚ïù")
        print()  # L√≠nea en blanco para separaci√≥n
    
    def mostrar_menu_principal(self):
        """
        Mostrar el men√∫ principal del sistema con todas las opciones disponibles.
        
        Presenta un men√∫ organizado por categor√≠as que incluye:
        - üîß GESTI√ìN DE PROCESOS: Opciones 1-5 para administrar procesos
        - üìÅ SISTEMA DE ARCHIVOS: Opci√≥n 6 para el simulador de archivos
        - üìä MONITOREO DEL SISTEMA: Opciones 7-8 para estad√≠sticas y b√∫squeda
        - ‚öôÔ∏è UTILIDADES: Opciones 9-10 para informaci√≥n y limpieza
        - Opci√≥n 0 para salir del sistema
        
        El men√∫ utiliza caracteres Unicode para crear un dise√±o visual atractivo
        y organizado que facilita la navegaci√≥n del usuario.
        """
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                        MEN√ö PRINCIPAL                               ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        # Secci√≥n de Gesti√≥n de Procesos
        print("‚îÇ  üîß GESTI√ìN DE PROCESOS                                            ‚îÇ")
        print("‚îÇ     1. Gestor Completo de Procesos                                 ‚îÇ")
        print("‚îÇ     2. Listar Procesos R√°pido                                      ‚îÇ")
        print("‚îÇ     3. Informaci√≥n de Proceso                                       ‚îÇ")
        print("‚îÇ     4. Iniciar Proceso                                              ‚îÇ")
        print("‚îÇ     5. Finalizar Proceso                                            ‚îÇ")
        print("‚îÇ                                                                     ‚îÇ")
        
        # Secci√≥n de Sistema de Archivos
        print("‚îÇ  üìÅ SISTEMA DE ARCHIVOS                                            ‚îÇ")
        print("‚îÇ     6. Sistema de Archivos Simulado                                ‚îÇ")
        print("‚îÇ                                                                     ‚îÇ")
        
        # Secci√≥n de Monitoreo del Sistema
        print("‚îÇ  üìä MONITOREO DEL SISTEMA                                          ‚îÇ")
        print("‚îÇ     7. Estad√≠sticas del Sistema                                     ‚îÇ")
        print("‚îÇ     8. Buscar Proceso por Nombre                                    ‚îÇ")
        print("‚îÇ                                                                     ‚îÇ")
        
        # Secci√≥n de Utilidades
        print("‚îÇ  ‚öôÔ∏è  UTILIDADES                                                     ‚îÇ")
        print("‚îÇ     9. Informaci√≥n del Sistema                                      ‚îÇ")
        print("‚îÇ    10. Limpiar Pantalla                                             ‚îÇ")
        print("‚îÇ                                                                     ‚îÇ")
        
        # Opci√≥n de salida
        print("‚îÇ     0. Salir del Sistema                                            ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    
    def mostrar_info_sistema(self):
        """Mostrar informaci√≥n del sistema operativo unificado"""
        print("\n" + "="*60)
        print("INFORMACI√ìN DEL SISTEMA OPERATIVO UNIFICADO")
        print("="*60)
        
        # Informaci√≥n b√°sica
        print(f"Nombre: {self.nombre}")
        print(f"Versi√≥n: {self.version}")
        print(f"Fecha de inicio: {self.fecha_inicio.strftime('%d/%m/%Y %H:%M:%S')}")
        
        # Tiempo de ejecuci√≥n
        tiempo_ejecucion = datetime.datetime.now() - self.fecha_inicio
        horas, remainder = divmod(tiempo_ejecucion.seconds, 3600)
        minutos, segundos = divmod(remainder, 60)
        print(f"Tiempo de ejecuci√≥n: {horas:02d}:{minutos:02d}:{segundos:02d}")
        
        # M√≥dulos disponibles
        print("\nM√≥dulos disponibles:")
        print("  ‚úÖ Gesti√≥n de Procesos")
        print("     - Listar procesos del sistema")
        print("     - Obtener informaci√≥n detallada")
        print("     - Iniciar nuevos procesos")
        print("     - Finalizar procesos existentes")
        print("  ‚úÖ Sistema de Archivos Simulado")
        print("     - Crear/eliminar archivos y directorios")
        print("     - Navegaci√≥n por directorios")
        print("     - Visualizaci√≥n de contenido")
        print("  ‚úÖ Monitoreo del Sistema")
        print("     - Estad√≠sticas de CPU y memoria")
        print("     - B√∫squeda de procesos")
        print("     - Informaci√≥n del sistema")
        
        # Informaci√≥n t√©cnica
        print(f"\nPlataforma: {sys.platform}")
        print(f"Versi√≥n de Python: {sys.version.split()[0]}")
        print(f"Directorio de trabajo: {os.getcwd()}")
        
        # Dependencias
        print("\nDependencias requeridas:")
        print("  - psutil (gesti√≥n de procesos)")
        print("  - json (persistencia de datos)")
        print("  - datetime (manejo de fechas)")
        print("  - subprocess (ejecuci√≥n de procesos)")
    
    def limpiar_pantalla(self):
        """Limpiar la pantalla del sistema"""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("‚úÖ Pantalla limpiada exitosamente")
    
    def mostrar_despedida(self):
        """Mostrar mensaje de despedida"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        tiempo_total = datetime.datetime.now() - self.fecha_inicio
        horas, remainder = divmod(tiempo_total.seconds, 3600)
        minutos, segundos = divmod(remainder, 60)
        
        print("‚ïî" + "="*70 + "‚ïó")
        print("‚ïë" + "GRACIAS POR USAR EL SISTEMA OPERATIVO UNIFICADO".center(70) + "‚ïë")
        print("‚ïë" + " "*70 + "‚ïë")
        print("‚ïë" + f"Tiempo total de sesi√≥n: {horas:02d}:{minutos:02d}:{segundos:02d}".center(70) + "‚ïë")
        print("‚ïë" + f"Desarrollado con fines educativos".center(70) + "‚ïë")
        print("‚ïë" + " "*70 + "‚ïë")
        print("‚ïë" + "¬°Hasta la pr√≥xima! üëã".center(70) + "‚ïë")
        print("‚ïö" + "="*70 + "‚ïù")
    
    def ejecutar(self):
        """
        M√©todo principal que ejecuta el bucle del sistema operativo unificado.
        
        Este m√©todo implementa el bucle principal del sistema que:
        1. Muestra el banner de bienvenida al inicio
        2. Presenta el men√∫ principal de opciones
        3. Captura y procesa la entrada del usuario
        4. Ejecuta la funcionalidad correspondiente seg√∫n la opci√≥n seleccionada
        5. Maneja errores de entrada inv√°lida con mensajes informativos
        6. Contin√∫a ejecut√°ndose hasta que el usuario seleccione salir (opci√≥n 0)
        
        El sistema incluye manejo de excepciones para:
        - Valores no num√©ricos (ValueError)
        - Interrupciones del teclado (KeyboardInterrupt - Ctrl+C)
        - Errores inesperados del sistema
        
        Funcionalidades disponibles:
        - Gesti√≥n completa de procesos (opciones 1-5)
        - Sistema de archivos simulado (opci√≥n 6)
        - Monitoreo del sistema (opciones 7-8)
        - Utilidades del sistema (opciones 9-10)
        """
        # Mostrar banner de bienvenida al iniciar el sistema
        self.mostrar_banner()
        
        while True:
            try:
                # Mostrar el men√∫ principal con todas las opciones
                self.mostrar_menu_principal()
                
                # Capturar la opci√≥n seleccionada por el usuario
                opcion = input("\nüîπ Seleccione una opci√≥n: ").strip()
                
                # Procesar la opci√≥n seleccionada
                if opcion == "0":
                    # Opci√≥n de salida del sistema
                    print("\n" + "="*70)
                    print("üî¥ CERRANDO SISTEMA OPERATIVO UNIFICADO")
                    print("   ¬°Gracias por usar nuestro sistema!")
                    print("="*70)
                    break
                    
                elif opcion == "1":
                    # Gestor completo de procesos con interfaz avanzada
                    print("\nüîß Iniciando Gestor Completo de Procesos...")
                    from src.listar import ejecutar_gestor
                    ejecutar_gestor()
                    
                elif opcion == "2":
                    # Listado r√°pido de procesos activos
                    print("\nüìã Listando procesos activos...")
                    from src.listar import mostrar_procesos
                    mostrar_procesos()
                    
                elif opcion == "3":
                    # Informaci√≥n detallada de un proceso espec√≠fico
                    print("\nüîç Consultando informaci√≥n de proceso...")
                    from src.info import info_proceso
                    info_proceso()
                    
                elif opcion == "4":
                    # Iniciar un nuevo proceso en el sistema
                    print("\nüöÄ Iniciando nuevo proceso...")
                    from src.iniciar import ejecutar_iniciar
                    ejecutar_iniciar()
                    
                elif opcion == "5":
                    # Finalizar un proceso existente
                    print("\nüõë Finalizando proceso...")
                    from src.finalizar import ejecutar_finalizar
                    ejecutar_finalizar()
                    
                elif opcion == "6":
                    # Sistema de archivos simulado con terminal avanzada
                    print("\nüìÅ Accediendo al Sistema de Archivos Simulado...")
                    from src.filesystem import ejecutar_filesystem
                    ejecutar_filesystem()
                    
                elif opcion == "7":
                    # Estad√≠sticas completas del sistema
                    print("\nüìä Generando estad√≠sticas del sistema...")
                    from src.listar import mostrar_estadisticas
                    mostrar_estadisticas()
                    
                elif opcion == "8":
                    # B√∫squeda de procesos por nombre
                    print("\nüîé Buscando proceso por nombre...")
                    from src.listar import buscar_proceso
                    buscar_proceso()
                    
                elif opcion == "9":
                    # Informaci√≥n general del sistema operativo
                    print("\nüíª Mostrando informaci√≥n del sistema...")
                    self.mostrar_info_sistema()
                    
                elif opcion == "10":
                    # Limpiar la pantalla de la consola
                    print("\nüßπ Limpiando pantalla...")
                    import os
                    os.system('cls' if os.name == 'nt' else 'clear')
                    
                else:
                    # Manejo de opciones inv√°lidas
                    print("\n‚ùå OPCI√ìN INV√ÅLIDA")
                    print("   Por favor, seleccione un n√∫mero del 0 al 10")
                    
                # Pausa para que el usuario pueda leer los resultados
                if opcion != "0" and opcion != "10":
                    input("\n‚è∏Ô∏è  Presione Enter para continuar...")
                    
            except ValueError:
                # Error cuando se ingresa un valor no num√©rico
                print("\n‚ùå ERROR: Debe ingresar un n√∫mero v√°lido")
                input("‚è∏Ô∏è  Presione Enter para continuar...")
                
            except KeyboardInterrupt:
                # Manejo de interrupci√≥n por teclado (Ctrl+C)
                print("\n\nüî¥ INTERRUPCI√ìN DETECTADA")
                print("   Cerrando sistema de forma segura...")
                break
                
            except Exception as e:
                # Manejo de errores inesperados del sistema
                print(f"\n‚ùå ERROR INESPERADO: {str(e)}")
                print("   El sistema continuar√° funcionando...")
                input("‚è∏Ô∏è  Presione Enter para continuar...")

def verificar_dependencias():
    """
    Verificar que todas las dependencias necesarias est√©n instaladas.
    
    Esta funci√≥n comprueba la disponibilidad de las librer√≠as externas
    requeridas para el funcionamiento del sistema operativo unificado:
    
    - psutil: Librer√≠a para obtener informaci√≥n de procesos y sistema
    - pathlib: Librer√≠a para manejo de rutas (incluida en Python 3.4+)
    
    Returns:
        bool: True si todas las dependencias est√°n disponibles, False en caso contrario
        
    Raises:
        ImportError: Si alguna dependencia cr√≠tica no est√° instalada
        
    La funci√≥n proporciona mensajes informativos sobre el estado de cada
    dependencia y sugerencias de instalaci√≥n en caso de faltar alguna.
    """
    try:
        # Verificar psutil - librer√≠a cr√≠tica para gesti√≥n de procesos
        import psutil
        print("‚úÖ psutil: Disponible")
        
        # Verificar pathlib - incluida en Python 3.4+
        import pathlib
        print("‚úÖ pathlib: Disponible")
        
        print("üéâ Todas las dependencias est√°n correctamente instaladas")
        return True
        
    except ImportError as e:
        # Manejo de dependencias faltantes
        print(f"‚ùå Error de dependencia: {e}")
        print("\nüì¶ Para instalar las dependencias faltantes, ejecute:")
        print("   pip install -r requirements.txt")
        print("\n   O instale manualmente:")
        print("   pip install psutil")
        return False


def main():
    """
    Funci√≥n principal del sistema operativo unificado.
    
    Esta funci√≥n es el punto de entrada principal del programa que:
    1. Verifica que todas las dependencias est√©n instaladas
    2. Crea una instancia del sistema operativo unificado
    3. Inicia la ejecuci√≥n del sistema
    4. Maneja errores cr√≠ticos de inicializaci√≥n
    
    El sistema solo se ejecutar√° si todas las dependencias est√°n disponibles.
    En caso de faltar alguna dependencia, se mostrar√° un mensaje informativo
    con instrucciones para la instalaci√≥n.
    
    Funcionalidades del sistema:
    - Gesti√≥n completa de procesos del sistema
    - Sistema de archivos simulado con comandos de terminal
    - Monitoreo en tiempo real del sistema
    - Utilidades de informaci√≥n y mantenimiento
    """
    try:
        # Verificar dependencias antes de iniciar el sistema
        print("üîç Verificando dependencias del sistema...")
        if not verificar_dependencias():
            print("\n‚ùå No se puede iniciar el sistema sin las dependencias requeridas")
            return
        
        print("\n" + "="*70)
        print("üöÄ INICIANDO SISTEMA OPERATIVO UNIFICADO")
        print("="*70)
        
        # Crear e iniciar el sistema operativo unificado
        sistema = SistemaOperativoUnificado()
        sistema.ejecutar()
        
    except KeyboardInterrupt:
        # Manejo de interrupci√≥n durante la inicializaci√≥n
        print("\n\n‚ö†Ô∏è  Inicializaci√≥n interrumpida por el usuario")
        print("   Sistema cerrado de forma segura")
        
    except Exception as e:
        # Manejo de errores cr√≠ticos durante la inicializaci√≥n
        print(f"\n‚ùå ERROR CR√çTICO DE INICIALIZACI√ìN: {str(e)}")
        print("   No se pudo iniciar el sistema operativo unificado")
        print("   Verifique la instalaci√≥n y las dependencias")


# Punto de entrada del programa
if __name__ == "__main__":
    # Ejecutar la funci√≥n principal cuando el script se ejecute directamente
    main()